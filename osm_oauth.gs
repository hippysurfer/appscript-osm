// OSM OAuth for Google Sheets
//
// This uses the OAuth library from here: https://github.com/googleworkspace/apps-script-oauth2
// You must install this library by clicking on "Libraries" in the code editor.
//
// Authentication flow goes something like this:
//
// 1. OSM -> Setup: Follow instructions for creating a new App in OSM and enter the clientid and secret.
// 2. OSM -> Authorise: Click on the generated link to access the OSM authorisation page.
// 3. OSM -> Authorise (again): To indicate that authentication is now complete.
// 4. Access OSM.
// 5. OSM -> De-authorise: Removes the saved authentication tokens.
// 6. OSM -> Remove App: Removes the stored Clientid and Secret.
//
// You need to have an onOpen function defined as it will be called at various points to update the
// menu. It needs to contain something like this:
//
// var ui = SpreadsheetApp.getUi();
// var menu = ui.createMenu('OSM');

// if (!osm_has_app_creds()) {
//   menu.addItem('Setup', 'osm_setup_app');
// } else {
//   var driveService = osm_getOSMService();
//   if (!driveService.hasAccess()) {      
//     menu.addItem('Authorise', 'osm_authorise');
//     menu.addItem('Clear App Credentials', 'osm_remove_app');
//   } else {
//     ADD OTHER MENU ITEMS HERE
//     menu.addItem('De-Authorise', 'osm_logout');
//   }
//

function run() {
  
  var service = getOSMService();
  if (service.hasAccess()) {
    // Sandbox environment.
    var url = 'https://www.onlinescoutmanager.co.uk/oauth/resource';
    var response = UrlFetchApp.fetch(url, {
      headers: {
        Authorization: 'Bearer ' + service.getAccessToken()
      }
    });
    var headers = response.getAllHeaders();
    var result = JSON.parse(response.getContentText());
    Logger.log(JSON.stringify(result, null, 2));
  } else {
    var authorizationUrl = service.getAuthorizationUrl();
    Logger.log('Open the following URL and re-run the script: %s',
        authorizationUrl);
  }

}



function __logRedirectUri() {
  // Debug function to access the required redirect URL
  var service = getOSMService();
  Logger.log(service.getRedirectUri());
}

function osm_getOSMService() {
  // Create the OSM Service session object.

  // Use the clientid and secret from the User Properties store.
  var properties = PropertiesService.getUserProperties();
  var clientid = properties.getProperty('OSM_CONNECT_CLIENTID');
  var secret = properties.getProperty('OSM_CONNECT_SECRET');

  // Create a new service with the given name. The name will be used when
  // persisting the authorized token, so ensure it is unique within the
  // scope of the property store.
  return OAuth2.createService('OSM')

      // Set the endpoint URLs, which are the same for all Google services.
      .setAuthorizationBaseUrl('https://www.onlinescoutmanager.co.uk/oauth/authorize')
      .setTokenUrl('https://www.onlinescoutmanager.co.uk/oauth/token')

      // Set the client ID and secret, from the Google Developers Console.
      .setClientId(clientid)
      .setClientSecret(secret)

      // Set the name of the callback function in the script referenced
      // above that should be invoked to complete the OAuth flow.
      .setCallbackFunction('osm_authCallback')

      // Set the property store where authorized tokens should be persisted.
      .setPropertyStore(PropertiesService.getUserProperties())

      // Set the cache
      .setCache(CacheService.getUserCache())

      // Set a lock
      .setLock(LockService.getUserLock())

      // Set the scopes to request (space-separated for Google services).
      .setScope('section:member:read')

      // Below are Google-specific OAuth2 parameters.

      // Sets the login hint, which will prevent the account chooser screen
      // from being shown to users logged in with multiple accounts.
      //.setParam('login_hint', Session.getEffectiveUser().getEmail())

      // Requests offline access.
      //.setParam('access_type', 'offline')

      // Consent prompt is required to ensure a refresh token is always
      // returned when requesting offline access.
      //.setParam('prompt', 'consent');
}

function osm_setup_app() {
  // Give the user instructions on how to setup the application in OSM
  // prior to doing the authentication dance.
  // This will result in the do_pre_authorise function being run to store
  // the client_id and secret for the app as generated by OSM.

  // Create a dummy service object so that we can get the redirect URL.
  var dummy_service = OAuth2.createService('OSM')            
      .setClientId('XXXXX')
      .setClientSecret('XXXXXX')
      .setCallbackFunction('authCallback')
            
  var page = HtmlService.createTemplateFromFile('osm_pre_authorise');
  page.app_name = SpreadsheetApp.getActive().getName();
  page.redirect_url = dummy_service.getRedirectUri();
  var html = page.evaluate();
  html.setTitle("OSM App Access Setup");

  SpreadsheetApp.getUi().showSidebar(html);
}

function osm_remove_app() {
  // Remove the clientid and secret.
  osm_remove_app_creds();
  onOpen();
}

function osm_do_pre_authorise(formObject) {    
  // This is called from the html form in osm_pre_authorise
  osm_store_app_creds(formObject.clientid, formObject.secret);
  onOpen();  
};

function osm_has_creds() {
  // Test whether authentication is complete.
  var properties = PropertiesService.getUserProperties();  
  return (properties.getProperty('oauth2.OSM') != null)  
}

function osm_store_app_creds(clientid, secret) {
  var properties = PropertiesService.getUserProperties();  
  properties.setProperty('OSM_CONNECT_CLIENTID', clientid);
  properties.setProperty('OSM_CONNECT_SECRET', secret);
}

function osm_has_app_creds() {
  var properties = PropertiesService.getUserProperties();  
  return (properties.getProperty('OSM_CONNECT_CLIENTID') != null && 
          properties.getProperty('OSM_CONNECT_SECRET') != null)  
}

function osm_remove_app_creds() {
  var properties = PropertiesService.getUserProperties();  
  properties.deleteProperty('OSM_CONNECT_CLIENTID');
  properties.deleteProperty('OSM_CONNECT_SECRET');
  onOpen();
}

function osm_authorise() {
  var driveService = osm_getOSMService();
  if (!driveService.hasAccess()) {
    var authorizationUrl = driveService.getAuthorizationUrl();
    var template = HtmlService.createTemplate(
        'Click on the link below and follow the instructions on OSM to complete the authorisation. '+
        'Once complete return here and click close. </br><a href="<?= authorizationUrl ?>" target="_blank">Authorize on OSM</a></br> ' +
        '<input type="button" value="Close" onclick="google.script.host.close()" />');
    template.authorizationUrl = authorizationUrl;
    var page = template.evaluate();
    page.setTitle("Request Authorisation from OSM");
    SpreadsheetApp.getUi().showSidebar(page);
  } else {
    onOpen();
    var template = HtmlService.createTemplate(
        'Authorization is complete.');    
    var page = template.evaluate();
    SpreadsheetApp.getUi().showSidebar(page);
  }
}

function osm_authCallback(request) {
  var driveService = osm_getOSMService();
  var isAuthorized = driveService.handleCallback(request);
  onOpen();
  if (isAuthorized) {
    return HtmlService.createHtmlOutput('Success! You can close this tab.');
  } else {
    return HtmlService.createHtmlOutput('Denied. You can close this tab');
  }  
}

function logout() {
  var service = osm_getOSMService()
  service.reset();
  onOpen();
}

